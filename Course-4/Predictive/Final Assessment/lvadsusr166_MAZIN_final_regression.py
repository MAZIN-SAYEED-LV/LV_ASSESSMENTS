# -*- coding: utf-8 -*-
"""LVADSUSR166_Final_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ps6n_ese6b5SxJCHbbFhA3yeacHfvdxR
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error, explained_variance_score, r2_score
from sklearn.preprocessing import LabelEncoder, StandardScaler
from scipy import stats

# 1 Loading the dataset
df = pd.read_csv(r"/content/Fare prediction.csv")

# 2 Preprocessing
# 3 EDA
# both start here
df.info()

df.head()

df.shape

df.describe()

df.describe(include='all')

df.isnull().sum()

# Since there are no null values we don't need to work on removing them

df.duplicated().sum()

# Since there are no duplicate values we don't need to work on removing them

# Convert categorical columns to numerical
label_encoder = LabelEncoder()
for col in df.select_dtypes(include=['object']).columns:
    df[col] = label_encoder.fit_transform(df[col])

df.info()

# Using Z-score to remove outliers
for col in df.columns:
    if df[col].dtype in ['float64', 'int64']:
        z_scores = np.abs(stats.zscore(df[col]))
        threshold = 3
        outliers = np.where(z_scores > threshold)[0]
        print(f'Outliers in {col}: {outliers}')
        df[col].iloc[outliers] = df[col].mean()

df.shape

# Splitting data into train and test sets
X = df[["pickup_longitude", "pickup_latitude", "dropoff_longitude", "dropoff_latitude"]]
y = df["fare_amount"]

# Using Standard Scaler to scale
std = StandardScaler()
X_std = std.fit_transform(X)

X_train,X_test,y_train,y_test  = train_test_split(X_std,y,test_size=0.3,random_state=42)

# 4 Model training
model = RandomForestRegressor()
model.fit(X_train, y_train)

# Model evaluation/ Testing
y_pred = model.predict(X_test)

# Plot actual vs. predicted values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.5, label='Actual vs. Predicted')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Ideal line')
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs. Predicted')
plt.legend()
plt.show()

# 5 Evaluation Metrics
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
mape = mean_absolute_percentage_error(y_test, y_pred)
explained_var = explained_variance_score(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print all metrics
print("Mean Squared Error:", mse)
print("Mean Absolute Error:", mae)
print("Root Mean Squared Error:", rmse)
print("Mean Absolute Percentage Error:", mape)
print("Explained Variance Score:", explained_var)
print("R-squared:", r2)

# Plot metrics
metrics = {'Mean Squared Error': mse, 'Mean Absolute Error': mae, 'Root Mean Squared Error': rmse,
           'Mean Absolute Percentage Error': mape, 'Explained Variance Score': explained_var, 'R-squared': r2}
plt.figure(figsize=(12, 6))
plt.bar(metrics.keys(), metrics.values(), color=['blue', 'green', 'orange', 'red', 'purple', 'cyan'])
plt.xlabel('Metrics')
plt.ylabel('Value')
plt.title('Model Metrics')
plt.xticks(rotation=45)
plt.show()