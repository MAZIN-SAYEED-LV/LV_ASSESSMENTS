# -*- coding: utf-8 -*-
"""LVADSUSR166_Final_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CHWx1vOWAZC4X6c5Vk7O0nnphIun9pvl
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder, StandardScaler
from scipy.stats import zscore
from scipy import stats

# 1 Loading the dataset
df = pd.read_csv(r"/content/penguins_classification.csv")

# 2 Preprocessing
# 3 EDA
# both start here
df.info()

df.head()

df.shape

df.describe()

df.describe(include = 'all')

df.isnull().sum()

# Handling Missing values
df['bill_depth_mm'].fillna(df['bill_depth_mm'].mean(), inplace=True)

df.isnull().sum()

df.duplicated().sum()

# Since there are no duplicate values we don't need to work on removing them

label_encoder = LabelEncoder()
categorical_cols = df.select_dtypes(include=['object']).columns
for col in categorical_cols:
    df[col] = label_encoder.fit_transform(df[col])

# Visualizing distributions
for col in df.columns:
    plt.figure(figsize=(8, 4))
    sns.histplot(df[col], kde=True)
    plt.title(f'Distribution of {col}')
    plt.show()

# Outlier detection and treatment
for col in df.columns:
    if df[col].dtype in ['float64', 'int64']:
        plt.figure(figsize=(8, 4))
        sns.boxplot(x=df[col])
        plt.title(f'Boxplot of {col}')
        plt.show()
        z_scores = np.abs(stats.zscore(df[col]))
        threshold = 3
        outliers = np.where(z_scores > threshold)[0]
        print(f'Outliers in {col}: {outliers}')
        df[col].iloc[outliers] = df[col].mean()

# Splitting data into train and test sets
X = df.drop(["species"],axis=1)
y = df["species"]

std = StandardScaler()
X_std = std.fit_transform(X)
X_train,X_test,y_train,y_test  = train_test_split(X_std,y,test_size=0.3,random_state=42)

# 4 Training Decision Tree Classifier
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

# Predict on the testing set
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("\nAccuracy:", accuracy)

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Plot classification report
plt.figure(figsize=(10, 6))
sns.heatmap(pd.DataFrame(classification_report(y_test, y_pred, output_dict=True)).iloc[:-1, :].T, annot=True, cmap="YlGnBu")
plt.title('Classification Report')
plt.show()

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap="YlGnBu")
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()